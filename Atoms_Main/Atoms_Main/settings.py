"""
Django settings for Atoms_Main project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import logging

# import boto3
# from boto3.session import Session
# import watchtower

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# print('BASE_DIR',BASE_DIR)
prev_dir = os.path.abspath(os.path.join(BASE_DIR,'..'))
# log_file_path = BASE_DIR + '/logfiles/newlogfile_' + '.log'

# print('prev_dir',log_file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)re%h1ix@vmx0o3!z16ko^_tj$cm*50sqsv1q0kt7h%9!ohupb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.29.144','127.0.0.1','192.168.29.220',"65.0.154.172","43.204.19.66","172.31.44.26"]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'Atoms_users',
    'Atoms_machines',

    'channels',
    # 'django_celery_results',
    # 'django_celery_beat',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [

    'http://localhost:3000',
    'http://192.168.29.74:3000',
    'http://192.168.29.30:3000',
    'http://43.204.19.66:8000',



    ]

CORS_ALLOW_CREDENTIALS=True

CORS_ALLOW_HEADERS = [ 'Access-Control-Allow-Headers',
    'Access-Control-Allow-Methods',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Credentials',

    'Content-Type',
    'Authorization',
    'X-CSRFToken',
    'user-id'  ]
# CORS_ALLOW_HEADERS = ["*"]





ROOT_URLCONF = 'Atoms_Main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'build')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Atoms_Main.wsgi.application'
ASGI_APPLICATION = 'Atoms_Main.asgi.application'



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Atoms_Nested_db',
#         'USER': 'postgres',
#         'PASSWORD':'1357',
#         'HOST':'192.168.29.144',
#         'PORT':'5432',
#     }
# }
DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'AtomsDev',
        'PASSWORD':'Atoms150221',
        'HOST':'atomsdev.c9y8cmwqcg28.ap-south-1.rds.amazonaws.com',
        'PORT':'5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'build/static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MQTT_SERVER = 'broker.hivemq.com'
MQTT_PORT = 1883
MQTT_KEEPALIVE = 60
MQTT_USER = ''
MQTT_PASSWORD = ''

localpath="Atoms_machines/certificates"
awspath="/home/ubuntu/atoms_dev_server/Atoms_Dev/Atoms_Main/Atoms_machines/certificates"



AWSHOST = "a2vvzyfxrtj9zw-ats.iot.ap-south-1.amazonaws.com"
AWSPORT = 8883
CLIENTID = "maithri_client"
THINGNAME = "maithri_client"
CAPATH = awspath+"/AmazonRootCA1.pem"
CERTPATH = awspath+"/09ca209df4cc77d7fe5273ee62a21455a54874bdf75651a63323847989b625ec-certificate.pem.crt"
KEYPATH = awspath+"/09ca209df4cc77d7fe5273ee62a21455a54874bdf75651a63323847989b625ec-private.pem.key"

CHANNEL_LAYERS={
    "default":{
        'BACKEND':"channels_redis.core.RedisChannelLayer",
        "CONFIG":{
            "hosts":['redis://43.204.19.66'],
        }
    }
}



LOGS_DIR = os.path.join(BASE_DIR, 'logfiles')  # Define the logs directory

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(funcName)s - %(message)s'
            'format': '%(asctime)s [%(levelname)s] %(module)s.%(funcName)s: %(message)s'

            # 'style': '{',
            },
        },
    'handlers': {
        'infofile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            # 'filename': 'C://mydoc/logs/'+str(datetime.date.today())+'.log',
            'filename': str(BASE_DIR)+'/logfiles/newlogfile.log',
            'formatter':'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['infofile'],
            'propagate': True,
            'level': 'DEBUG'
        },
    },

}

#
# #celery----------
# CELERY_BROKER_URL = 'redis://65.0.154.172:6379'  # Replace with your broker URL
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata'
# # CELERY_RESULT_BACKEND = 'redis://65.0.154.172:6379/15'  # Replace with your result backend URL
# CELERY_RESULT_BACKEND = 'django-db'
#
# #celery beat-------------
#
# CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler'