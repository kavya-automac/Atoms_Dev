"""
Django settings for Atoms_Main project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import logging

# import boto3
# from boto3.session import Session
# import watchtower

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# print('BASE_DIR',BASE_DIR)
prev_dir = os.path.abspath(os.path.join(BASE_DIR,'..'))
# log_file_path = BASE_DIR + '/logfiles/newlogfile_' + '.log'

# print('prev_dir',log_file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)re%h1ix@vmx0o3!z16ko^_tj$cm*50sqsv1q0kt7h%9!ohupb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.29.144','127.0.0.1','192.168.29.220',"65.0.154.172","43.204.19.66"]

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'Atoms_users',
    'Atoms_machines',

    'channels',
    # 'django_celery_results',
    # 'django_celery_beat',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [

    'http://localhost:3000',
    'http://192.168.29.74:3000',
    'http://192.168.29.30:3000',



    ]

CORS_ALLOW_CREDENTIALS=True

CORS_ALLOW_HEADERS = [ 'Access-Control-Allow-Headers',
    'Access-Control-Allow-Methods',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Credentials',

    'Content-Type',
    'Authorization',
    'X-CSRFToken',
    'user-id'  ]
# CORS_ALLOW_HEADERS = ["*"]





ROOT_URLCONF = 'Atoms_Main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'build')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Atoms_Main.wsgi.application'
ASGI_APPLICATION = 'Atoms_Main.asgi.application'



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Atoms_Nested_db',
#         'USER': 'postgres',
#         'PASSWORD':'1357',
#         'HOST':'192.168.29.144',
#         'PORT':'5432',
#     }
# }
DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'AtomsDev',
        'PASSWORD':'Atoms150221',
        'HOST':'atomsdev.c9y8cmwqcg28.ap-south-1.rds.amazonaws.com',
        'PORT':'5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'build/static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MQTT_SERVER = 'broker.hivemq.com'
MQTT_PORT = 1883
MQTT_KEEPALIVE = 60
MQTT_USER = ''
MQTT_PASSWORD = ''


#
#
# AWSHOST = "a2vvzyfxrtj9zw-ats.iot.ap-south-1.amazonaws.com"
# AWSPORT = 8883
# CLIENTID = "maithri_client"
# THINGNAME = "maithri_client"
# CAPATH = "Automac_machines_app/certificates/AmazonRootCA1.pem"
# CERTPATH = "Automac_machines_app/certificates/09ca209df4cc77d7fe5273ee62a21455a54874bdf75651a63323847989b625ec-certificate.pem.crt"
# KEYPATH = "Automac_machines_app/certificates/09ca209df4cc77d7fe5273ee62a21455a54874bdf75651a63323847989b625ec-private.pem.key"
#
CHANNEL_LAYERS={
    "default":{
        'BACKEND':"channels_redis.core.RedisChannelLayer",
        "CONFIG":{
            "hosts":['redis://65.0.154.172'],
        }
    }
}



LOGS_DIR = os.path.join(BASE_DIR, 'logfiles')  # Define the logs directory

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(funcName)s - %(message)s'
            'format': '%(asctime)s [%(levelname)s] %(module)s.%(funcName)s: %(message)s'

            # 'style': '{',
            },
        },
    'handlers': {
        'infofile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            # 'filename': 'C://mydoc/logs/'+str(datetime.date.today())+'.log',
            'filename': str(BASE_DIR)+'/logfiles/newlogfile.log',
            'formatter':'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['infofile'],
            'propagate': True,
            'level': 'DEBUG'
        },
    },

}

#
# #celery----------
# CELERY_BROKER_URL = 'redis://65.0.154.172:6379'  # Replace with your broker URL
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Kolkata'
# # CELERY_RESULT_BACKEND = 'redis://65.0.154.172:6379/15'  # Replace with your result backend URL
# CELERY_RESULT_BACKEND = 'django-db'
#
# #celery beat-------------
#
# CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler'








#
# AWS_ACCESS_KEY_ID = 'AKIAU6GDZMPJEGLBYVW2'
# AWS_SECRET_ACCESS_KEY = 'yKDpoHAwB2duXWTd4Rjcs2ldA30uIzLHa22kRG6z'
# AWS_REGION_NAME = 'ap-south-1'
# AWS_LOG_GROUP = ' AtomsDevLogs', # your log group
# AWS_LOG_STREAM = ' AtomsDevStream', # your stream
# AWS_LOGGER_NAME = 'watchtower-logger' # your logger
#
#
# # logger
# boto3_session = Session(
#   aws_access_key_id=AWS_ACCESS_KEY_ID,
#   aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#   region_name=AWS_REGION_NAME
# )
#
#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "aws": {
#             "format": "%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
#             "datefmt": "%Y-%m-%d %H:%M:%S",
#         },
#     },
#     "handlers": {
#         "watchtower": {
#             "level": "INFO",
#             "class": "watchtower.CloudWatchLogHandler",
#             "log_group": "YOUR_LOG_GROUP",
#             "stream_name": "YOUR_STREAM_NAME",
#             "formatter": "aws",
#         },
#         "console": {"class": "logging.StreamHandler", "formatter": "aws",},
#     },
#     "loggers": {
#         "django": {"handlers": ["watchtower"], "level": "INFO"},
#         "root": {"handlers": ["watchtower"], "level": "INFO"},
#         "watchtower": {"level": "DEBUG"},  # Set higher level for more details
#     },
# }


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "aws": {
#             "format": "%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
#             "datefmt": "%Y-%m-%d %H:%M:%S",
#         },
#     },
#     "handlers": {
#         "watchtower": {
#             "level": "INFO",
#             "class": "watchtower.CloudWatchLogHandler",
#             "region_name": AWS_REGION_NAME,  # Added region_name
#             "log_group": AWS_LOG_GROUP,
#             "stream_name": AWS_LOG_STREAM,
#             "formatter": "aws",
#         },
#         "console": {"class": "logging.StreamHandler", "formatter": "aws",},
#     },
#     "loggers": {
#         # Use this logger to send data just to Cloudwatch
#         "watchtower": {"level": "INFO", "handlers": ["watchtower"], "propogate": False,}
#     },
# }



# settings.py

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'watchtower': {
#             'level': 'DEBUG',
#             'class': 'watchtower.CloudWatchLogHandler',
#             'log_group': AWS_LOG_GROUP,  # Enter your log group name
#             'stream_name': AWS_LOG_STREAM,  # Enter your log stream name
#             'formatter': 'verbose',
#             # 'aws_region':AWS_REGION_NAME
#             # 'boto3_session': boto3.Session(
#             #   aws_access_key_id=AWS_ACCESS_KEY_ID,
#             #   aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
#
#             # ),
#         },
#     },
#     'loggers': {
#         AWS_LOGGER_NAME: {
#             'handlers': ['watchtower'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
# logger = logging.getLogger("handlers")





# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'aws': {
#             # you can add specific format for aws here
#             # if you want to change format, you can read:
#             #    https://stackoverflow.com/questions/533048/how-to-log-source-file-name-and-line-number-in-python/44401529
#             'format': u"%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
#             'datefmt': "%Y-%m-%d %H:%M:%S"
#         },
#     },
#     'handlers': {
#         'watchtower': {
#             'level': 'DEBUG',
#             'class': 'watchtower.CloudWatchLogHandler',
#                      'boto3_session': boto3_session,
#                      'log_group': AWS_LOG_GROUP,
#                      'stream_name': AWS_LOG_STREAM,
#             'formatter': 'aws', # use custom format
#         },
#     },
#     'loggers': {
#         AWS_LOGGER_NAME: {
#             'level': 'DEBUG',
#             'handlers': ['watchtower'],
#             'propagate': True,
#         },
#         # add your other loggers here...
#     },
# }

# cloudwatch_handler = watchtower.CloudWatchLogHandler(
#     log_group=AWS_LOG_GROUP,
#     stream_name=AWS_LOG_STREAM,
#     send_interval=5,  # Adjust send interval as needed
# )
#
# # Configure logging
# logging.basicConfig(level=logging.DEBUG)
# logger = logging.getLogger(AWS_LOGGER_NAME)
# logger.addHandler(cloudwatch_handler)
#
# # Test the logger
# logger.debug("Testing logging with watchtower")

#
# # Configure logging
# logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]')
#
# # Create a handler for CloudWatch
# cloudwatch_handler = watchtower.CloudWatchLogHandler(
#     boto3_session=boto3_session,
#     log_group=AWS_LOG_GROUP,
#     stream_name=AWS_LOG_STREAM
# )
#
# # Set the formatter for the handler
# cloudwatch_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]'))
#
# # Get the logger
# logger = logging.getLogger(AWS_LOGGER_NAME)
# logger.setLevel(logging.DEBUG)
#
# # Add the CloudWatch handler to the logger
# logger.addHandler(cloudwatch_handler)


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'aws': {
#             'format': u"%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
#             'datefmt': "%Y-%m-%d %H:%M:%S"
#         },
#     },
#     'handlers': {
#         'watchtower': {
#             'level': 'DEBUG',
#             'class': 'watchtower.CloudWatchLogHandler',
#             'boto3_session': boto3_session,  # Passing the boto3 session
#             'log_group': AWS_LOG_GROUP,
#             'stream_name': AWS_LOG_STREAM,
#             'formatter': 'aws',  # use custom format
#         },
#     },
#     'loggers': {
#         AWS_LOGGER_NAME: {
#             'level': 'DEBUG',
#             'handlers': ['watchtower'],
#             'propagate': False,
#         },
#         # add your other loggers here...
#     },
# }
#
# # Apply logging configuration
# logging.config.dictConfig(LOGGING)
#
# # Get logger
# logger = logging.getLogger(AWS_LOGGER_NAME)

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'aws': {
#             # you can add specific format for aws here
#             # if you want to change format, you can read:
#             #    https://stackoverflow.com/questions/533048/how-to-log-source-file-name-and-line-number-in-python/44401529
#             'format': u"%(asctime)s [%(levelname)-8s] %(message)s [%(pathname)s:%(lineno)d]",
#             'datefmt': "%Y-%m-%d %H:%M:%S"
#         },
#     },
#     'handlers': {
#         'watchtower': {
#             'level': 'DEBUG',
#             'class': 'watchtower.CloudWatchLogHandler',
#                      'boto3_session': boto3_session,
#                      'log_group': AWS_LOG_GROUP,
#                      'stream_name': AWS_LOG_STREAM,
#             'formatter': 'aws', # use custom format
#         },
#     },
#     'loggers': {
#         AWS_LOGGER_NAME: {
#             'level': 'DEBUG',
#             'handlers': ['watchtower'],
#             'propagate': False,
#         },
#         # add your other loggers here...
#     },
# }

#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'watchtower': {
#             'level': 'DEBUG',
#             'class': 'django_cloudwatch_logger.log.Handler',
#             'log_group_name': 'django_logs_group_name',  # customize as needed
#             'stream_name': 'django_logs_stream_name',    # customize as needed
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['watchtower'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }
